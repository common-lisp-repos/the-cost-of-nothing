#+BEGIN_QUOTE
A LISP programmer knows the value of everything, but the cost of nothing.

--- Alan Perlis
#+END_QUOTE

This library attempts to measure the execution time of Lisp code using only
portable mechanisms, i.e. get-internal-run-time. Using some macrology and
sampling, the measurements can be accurate to the nanosecond.

Apart from the benchmark utilities, the library features a test suite that
reports the runtime of various Common Lisp features like CLOS, function
calls, hashtables, garbage collection and many others. This may give
valuable performance insights, e.g. for which size hashtables outperform
linked lists on a given implementation.

I hope you find it useful. If you have new ideas for benchmarks, or
suggestions on how to improve existing ones, feel free to contact me.

** Usage
To run all benchmarks, simply execute

#+BEGIN_SRC lisp :results output
(asdf:test-system :the-cost-of-nothing)
#+END_SRC

To obtain the execution time of an expression as a double-float in seconds,
execute
#+BEGIN_SRC lisp
(benchmark EXPRESSION)
#+END_SRC

To have said execution time immediately and human-readably written to
*trace-output* (much like CL:TIME), use
#+BEGIN_SRC lisp
(bench EXPRESSION)
#+END_SRC

To measure only some parts of an expression, type
#+BEGIN_SRC lisp
(nested-benchmark
  (foo)
  (bar)
  (benchmark SUBEXPRESSION1)
  (let ((a (baz)))
    (benchmark SUBEXPRESSION2)))
#+END_SRC

Furthermore the library exports the following functions
- TOUCH
- MEASURE-EXECUTION-TIME
- MEASURE-EXECUTION-TIME-OF-THUNK
- WRITE-SI-UNIT
- QUANTITY-STRING

And some functions to register and query benchmarks:
- DEFINE-BENCHMARK
- QUERY-BENCHMARKS
- PRINT-BENCHMARK-RESULTS
- SHOW-BENCHMARK-RESULTS
- SHOW-BENCHMARK-RESULTS!

Note: The set of exported symbols might change over time, especially the
facilities for defining and running benchmarks. Please do not :USE this
package and :IMPORT-FROM it instead.

** Implementation
A statement like
#+BEGIN_SRC lisp
(nested-benchmark
 (loop for key across keys do
   (benchmark (gethash key table))))
#+END_SRC

is a macro that expands into something like
#+BEGIN_SRC lisp
(measure-execution-time
 (lambda (#:iterations723)
   (loop :repeat #:iterations723
         :do (loop for key across keys
                   do (touch (gethash key table)))))
 :overhead
 (lambda (#:iterations723)
   (loop :repeat #:iterations723
         :do (loop for key across keys
                   do (touch nil)))))
#+END_SRC

The function TOUCH is explicitly declared notinline, to prevent compiler
optimization. The function MEASURE-EXECUTION-TIME invokes its argument
functions with higher and higher numbers of iterations, until the
difference between them is significant.

** Remember
#+BEGIN_QUOTE
There are lies, damned lies, and benchmarks.
#+END_QUOTE
